import os
import sys
from datetime import time, datetime
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from telegram import Update
from telegram.error import TelegramError
from telegram.ext import Application, CommandHandler, ContextTypes

# OpenAI SDK (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Groq OpenAI-compatible API)
from openai import OpenAI

# =========================
# ENV & GLOBALS
# =========================
load_dotenv()

# –û—Å–Ω–æ–≤–Ω—ã–µ
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
CHANNEL_ID = (os.getenv("CHANNEL_ID") or "").strip()  # @username –∏–ª–∏ numeric (-100xxxxxxxxxx)

# LLM / Groq
OPENAI_API_KEY  = (os.getenv("OPENAI_API_KEY") or "").strip()       # –¥–æ–ø—É—Å–∫–∞–µ–º sk_* –∏ gsk_*
OPENAI_MODEL    = (os.getenv("OPENAI_MODEL") or "gpt-4o-mini").strip()
OPENAI_BASE_URL = (os.getenv("OPENAI_BASE_URL") or "").strip()       # –¥–ª—è Groq: https://api.groq.com/openai/v1

# –í—Ä–µ–º—è
POST_HOUR   = int(os.getenv("POST_HOUR", "12"))
POST_MINUTE = int(os.getenv("POST_MINUTE", "0"))
TZ = ZoneInfo("Asia/Tashkent")

# –ó–∞–ø—É—Å–∫
WEBHOOK_URL = (os.getenv("WEBHOOK_URL") or "").strip()  # https://<service>.onrender.com
PORT        = int(os.getenv("PORT", "8080"))

# –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ (—Ñ–∞–π–ª/ENV)
BRAND_PROFILE_PATH  = (os.getenv("BRAND_PROFILE_PATH") or "brand_profile.md").strip()
COMPANY_PROFILE_ENV = (os.getenv("COMPANY_PROFILE") or "").strip()

# –û–≤–µ—Ä—Ä–∞–π–¥—ã –ø—Ä–æ–º—Ç–æ–≤ –∏–∑ ENV (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
PROMPT_SYSTEM   = (os.getenv("PROMPT_SYSTEM") or "").strip()
PROMPT_STYLE_RU = (os.getenv("PROMPT_STYLE_RU") or "").strip()
PROMPT_STYLE_UZ = (os.getenv("PROMPT_STYLE_UZ") or "").strip()
TOPICS_ENV      = (os.getenv("TOPICS") or "").strip()  # –¢–µ–º—ã —á–µ—Ä–µ–∑ | (pipe)

# –ü–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç–∞–º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ)
SIGN_RU = "‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞"
SIGN_UZ = "‚Äî Kanalning AI yordamchisi"

# –¢–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ TOPICS)
CONTENT_PILLARS = [
    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∏ –∫–∞—á–µ—Å—Ç–≤—É –∫—É–∫—É—Ä—É–∑–Ω—ã—Ö –ø–∞–ª–æ—á–µ–∫",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —É–ø–∞–∫–æ–≤–∫–∞ —Å–Ω–µ–∫–æ–≤: –∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∏ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏",
    "–ò—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ª–∏—Å—å—è –±—Ä–µ–Ω–¥–∞ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã",
    "Faktlar va tahlillar: O‚Äòzbekiston va Markaziy Osiyodagi snek bozori",
    "Qiziqarli mini-ideyalar: trendlar, savollar, jamoa faolligi",
    "–ö–∞–∫ –¥–æ–±–∏—Ç—å—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Å–ª–æ—è –ø—É–¥—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö—Ä—É—Å—Ç",
    "Qadoqlashning ahamiyati: havo 'yostiqchasi' nimaga kerak?"
]

# –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ENV'–æ–º)
STYLE_RU = (
    "–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º. 2‚Äì3 —É–º–µ—Å—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏. "
    "1 —Ñ–∞–∫—Ç/–ª–∞–π—Ñ—Ö–∞–∫, –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å-CTA –≤ –∫–æ–Ω—Ü–µ. 2‚Äì4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞."
)
STYLE_UZ = (
    "Qisqa va aniq, yengil hazil bilan. 2‚Äì3 mos emoji. "
    "1 foydali fikr/fakt, oxirida yumshoq savol-CTA. 2‚Äì4 mos hashtag."
)

# =========================
# VALIDATION & HELPERS
# =========================
def _fail(msg: str) -> None:
    print(f"[FATAL] {msg}", file=sys.stderr)
    raise RuntimeError(msg)

def _split_env_list(s: str) -> list[str]:
    return [x.strip() for x in s.split("|") if x.strip()]

if not BOT_TOKEN:
    _fail("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
if not CHANNEL_ID:
    _fail("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–∏–º–µ—Ä: @your_channel –∏–ª–∏ -100xxxxxxxxxx.")
if not OPENAI_API_KEY:
    _fail("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω (–¥–ª—è Groq –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å gsk_).")

# –ü—Ä–∏–º–µ–Ω—è–µ–º ENV-–æ–≤–µ—Ä—Ä–∞–π–¥—ã –¥–ª—è —Å—Ç–∏–ª–µ–π/—Ç–µ–º
if PROMPT_STYLE_RU:
    STYLE_RU = PROMPT_STYLE_RU
if PROMPT_STYLE_UZ:
    STYLE_UZ = PROMPT_STYLE_UZ
if TOPICS_ENV:
    CONTENT_PILLARS = _split_env_list(TOPICS_ENV)

# –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞: —Ñ–∞–π–ª -> ENV -> –ø—É—Å—Ç–æ
def _read_brand_profile() -> str:
    p = BRAND_PROFILE_PATH
    if p and os.path.isfile(p):
        try:
            with open(p, "r", encoding="utf-8") as f:
                txt = f.read()
                return txt[:8000]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        except Exception as e:
            print(f"[WARN] brand_profile read error: {e}")
    if COMPANY_PROFILE_ENV:
        return COMPANY_PROFILE_ENV[:8000]
    return ""

BRAND_PROFILE_TEXT = _read_brand_profile()

# LLM client (OpenAI or Groq-compatible)
client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL if OPENAI_BASE_URL else None,
)

# =========================
# PROMPTS
# =========================
def build_bilingual_prompt() -> tuple[str, str]:
    """–°–æ–±–∏—Ä–∞–µ–º system+user –ø—Ä–æ–º—Ç—ã. –¢–µ–º—ã —Å–ª—É—á–∞–π–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–º–µ—à–∏–≤–∞–µ—Ç—Å—è –≤ system."""
    import random
    topic = random.choice(CONTENT_PILLARS)

    # System: –±–µ—Ä—ë–º –∏–∑ ENV –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç + –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
    system_default = (
        "–¢—ã ‚Äî SMM-—Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ —Å–Ω–µ–∫–∏ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. "
        "–ü–∏—à–∏ –î–í–£–Ø–ó–´–ß–ù–û: —Å–Ω–∞—á–∞–ª–∞ RUS, –∑–∞—Ç–µ–º UZ (latin). "
        "–¢–æ–Ω ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∂–∏–≤–æ–π, –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞; –∏—Å–ø–æ–ª—å–∑—É–π 2‚Äì3 —É–º–µ—Å—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏. "
        "–í –∫–∞–∂–¥–æ–º —è–∑—ã–∫–µ –¥–∞–π –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –º–∏–Ω–∏-–ª–∞–π—Ñ—Ö–∞–∫ –ø–æ —Ç–µ–º–µ. "
        "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã; –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø–∏—à–∏ –±–µ–∑ —á–∏—Å–µ–ª. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ–¥–ø–∏—Å—å ‚Äî –µ—ë –¥–æ–±–∞–≤–∏—Ç –±–æ—Ç."
    )
    system = (PROMPT_SYSTEM or system_default) + (
        f"\n\n=== COMPANY PROFILE START ===\n{BRAND_PROFILE_TEXT}\n=== COMPANY PROFILE END ==="
        if BRAND_PROFILE_TEXT else ""
    )

    style_ru = STYLE_RU
    style_uz = STYLE_UZ

    user = f"""
Sana: {datetime.now(TZ).strftime('%Y-%m-%d')}. Tema/–¢–µ–º–∞: ‚Äú{topic}‚Äù.

Format javobi / –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (bez sarlavha/prefixov):

[RUS]
(2‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π; {style_ru})
(2‚Äì3 —ç–º–æ–¥–∑–∏ –ø–æ —Å–º—ã—Å–ª—É)
(–≤ –∫–æ–Ω—Ü–µ 2‚Äì4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞)

[UZ]
(2‚Äì5 gap; {style_uz})
(2‚Äì3 mos emoji)
(oxirida 2‚Äì4 hashtag)

Qoidalar / –ü—Ä–∞–≤–∏–ª–∞:
- RU va UZ matnlar tabiiy bo‚Äòlsin, literal tarjima emas.
- Statistikani agar aniq bilmasang ‚Äî sonlarsiz yoz; havola/narx ‚Äî yo‚Äòq.
- Sog‚Äòliq/politika mavzulariga kirmagin.
- –ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª—è–π ‚Äî –µ—ë –≤—Å—Ç–∞–≤–∏—Ç –±–æ—Ç.
"""
    return system, user

def post_signature() -> str:
    return f"\n\n{SIGN_RU}\n{SIGN_UZ}"

# =========================
# GENERATION & PUBLISH
# =========================
async def generate_bilingual_post() -> str:
    """–ì–µ–Ω–µ—Ä–∏–º RU+UZ —Ç–µ–∫—Å—Ç; –Ω–∞ –æ—à–∏–±–∫–∞—Ö ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ñ–æ–ª–±—ç–∫."""
    system, user = build_bilingual_prompt()
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system},
                {"role": "user",   "content": user},
            ],
            temperature=0.8,
        )
        text = (resp.choices[0].message.content or "").strip()
        if not text:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
        return text + post_signature()
    except Exception as e:
        print(f"[LLM ERROR] {e}", file=sys.stderr)
        fallback = (
            "[RUS]\n"
            "–ì–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Å–≤–µ–∂–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –æ —Å–Ω–µ–∫–∞—Ö –∏ –∏—Ö —Ö—Ä—É—Å—Ç–µ. "
            "–°–∫–æ—Ä–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤! üòä\n\n"
            "[UZ]\n"
            "Sneklar va ularning xrusti haqida yangi foydali material tayyorlanmoqda. "
            "Tez orada qiziqarli faktlar bilan bo‚Äòlishamiz! üôÇ\n"
        )
        return fallback + post_signature()

async def publish_post(context: ContextTypes.DEFAULT_TYPE) -> None:
    text = await generate_bilingual_post()
    try:
        MAX = 4096
        if len(text) <= MAX:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        else:
            parts = [text[i:i+MAX] for i in range(0, len(text), MAX)]
            for i, p in enumerate(parts):
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=p if i == 0 else f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n{p}"
                )
    except TelegramError as te:
        print(f"[Telegram ERROR] {te}", file=sys.stderr)
    except Exception as e:
        print(f"[SEND ERROR] {e}", file=sys.stderr)

# =========================
# COMMANDS
# =========================
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ-–ø–æ—Å—Ç–µ—Ä RU+UZ.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/postnow ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å RU+UZ –ø–æ—Å—Ç —Å–µ–π—á–∞—Å\n"
        "/status  ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/diag    ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ LLM\n"
        "/profile ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ –ø–æ–¥–º–µ—à–∏–≤–∞–µ—Ç—Å—è\n"
        "/help    ‚Äî –ø–æ–º–æ—â—å"
    )

async def postnow_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é RU+UZ –ø–æ—Å—Ç‚Ä¶")
    try:
        await publish_post(context)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = "webhook" if WEBHOOK_URL else "polling"
    t = f"{POST_HOUR:02d}:{POST_MINUTE:02d}"
    await update.message.reply_text(
        f"–ö–∞–Ω–∞–ª: {CHANNEL_ID}\n"
        f"–ú–æ–¥–µ–ª—å: {OPENAI_MODEL}\n"
        f"BASE_URL: {OPENAI_BASE_URL or 'default'}\n"
        f"–†–µ–∂–∏–º: {mode}\n"
        f"–ü–æ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ: {t} (Asia/Tashkent)\n"
        f"–ü–æ–¥–ø–∏—Å—å: –≤—Å–µ–≥–¥–∞ RU+UZ"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—É–±–ª–∏–∫—É—é –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —É–∑–±–µ–∫—Å–∫–æ–º (lotin). "
        "–í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Å—å –∫–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /postnow, /status, /diag, /profile, /help"
    )

async def diag_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    masked = (OPENAI_API_KEY[:3] + "..." + OPENAI_API_KEY[-4:]) if OPENAI_API_KEY else "‚Äî"
    base = OPENAI_BASE_URL or "default"
    try:
        test = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "ping"}],
            temperature=0.0,
            max_tokens=5,
        )
        ok = (test.choices[0].message.content or "").strip()
        await update.message.reply_text(
            f"Diag:\nKEY: {masked}\nMODEL: {OPENAI_MODEL}\nBASE_URL: {base}\nOK ‚úÖ ({ok[:60]})"
        )
    except Exception as e:
        await update.message.reply_text(
            f"Diag:\nKEY: {masked}\nMODEL: {OPENAI_MODEL}\nBASE_URL: {base}\nERR: {e}"
        )

async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ln = len(BRAND_PROFILE_TEXT or "")
    preview = (BRAND_PROFILE_TEXT[:500] + "‚Ä¶") if BRAND_PROFILE_TEXT and len(BRAND_PROFILE_TEXT) > 500 else (BRAND_PROFILE_TEXT or "‚Äî")
    await update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {ln} —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü—Ä–µ–≤—å—é:\n{preview}"
    )

# =========================
# SCHEDULER
# =========================
def schedule_daily(app: Application):
    if app.job_queue is None:
        _fail("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: python-telegram-bot[job-queue,webhooks]==21.4")
    # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö
    for job in app.job_queue.get_jobs_by_name("daily_post_tashkent"):
        job.schedule_removal()
    app.job_queue.run_daily(
        publish_post,
        time=time(hour=POST_HOUR, minute=POST_MINUTE, tzinfo=TZ),
        name="daily_post_tashkent",
    )

# =========================
# MAIN
# =========================
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # handlers
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(CommandHandler("postnow", postnow_cmd))
    application.add_handler(CommandHandler("status", status_cmd))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("diag", diag_cmd))
    application.add_handler(CommandHandler("profile", profile_cmd))

    schedule_daily(application)

    if WEBHOOK_URL:
        # Webhooks —Ä–µ–∂–∏–º (Render)
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=f"{BOT_TOKEN}",                    # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",   # –ø—É–±–ª–∏—á–Ω—ã–π URL
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        application.run_polling()

if __name__ == "__main__":
    main()
